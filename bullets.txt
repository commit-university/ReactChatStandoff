function() {
    super()
    this.state = {
        roomId: null,
        messages: [],
        joinableRooms: [],
        joinedRooms: []
    }
    this.sendMessage = this.sendMessage.bind(this)
    this.subscribeToRoom = this.subscribeToRoom.bind(this)
    this.getRooms = this.getRooms.bind(this)
} 

function() {
    const chatManager = new Chatkit.ChatManager({
        instanceLocator,
        userId: userName,
        tokenProvider: new Chatkit.TokenProvider({
            url: tokenUrl
        })
    })
    
    chatManager.connect()
    .then(currentUser => {
        this.currentUser = currentUser
        console.log(this.currentUser.rooms)
        this.getRooms()
    })
    .catch(err => console.log('error on connecting: ', err))
}

function() {
    this.currentUser.getJoinableRooms()
    .then(joinableRooms => {
        this.setState({
            joinableRooms,
            joinedRooms: this.currentUser.rooms
        })
    })
    .catch(err => console.log('error on joinableRooms: ', err))
}

function(roomId) {
    this.setState({ messages: [] })
    this.currentUser.subscribeToRoom({
        roomId: roomId,
        hooks: {
            onNewMessage: message => {
                this.setState({
                    messages: [...this.state.messages, message]
                })
            },
            onUserStartedTyping: user => {
                /** render out the users */
            }
            
        }
    })
    .then(room => {
        this.setState({
            roomId: room.id
        })
        this.getRooms()
    })
    .catch(err => console.log('error on subscribing to room: ', err))
}

function(text) {
    this.currentUser.sendMessage({
        text,
        roomId: this.state.roomId
    })
}

function() {
    return (
        <div className="app">
            <RoomList
                subscribeToRoom={this.subscribeToRoom}
                rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}
                roomId={this.state.roomId} />
            <MessageList 
                roomId={this.state.roomId}
                messages={this.state.messages} />
            <SendMessageForm
                disabled={!this.state.roomId}
                sendMessage={this.sendMessage} />
        </div>
    );
}

function() {
    const node = ReactDOM.findDOMNode(this)
    this.shouldScrollToBottom = node.scrollTop + node.clientHeight + 100 >= node.scrollHeight
}

function() {
    if (this.shouldScrollToBottom) {
        const node = ReactDOM.findDOMNode(this)
        node.scrollTop = node.scrollHeight   
    }
}

function() {
    if (!this.props.roomId) {
        return (
            <div className="message-list">
                <div className="join-room">
                    Join a room! &rarr; 
                </div>
            </div>
        )
    }
    return (
        <div className="message-list">
            {this.props.messages.map((message, index) => {
                return (
                    <Message key={message.id} username={message.senderId} text={message.text} />
                )
            })}
        </div>
    )
}

function() {
    super()
    this.state = {
        message: ''
    }
    this.handleChange = this.handleChange.bind(this)
    this.handleSubmit = this.handleSubmit.bind(this)
}

function(e) {
    this.setState({
        message: e.target.value
    })
}

function(e) {
    e.preventDefault()
    this.props.sendMessage(this.state.message)
    this.setState({
        message: ''
    })
}

function() {
    return (
        <form
            onSubmit={this.handleSubmit}
            className="send-message-form">
            <input
                disabled={this.props.disabled}
                onChange={this.handleChange}
                value={this.state.message}
                placeholder="Type your message and hit ENTER"
                type="text" />
        </form>
    )
}

function () {
    const orderedRooms = [...this.props.rooms].sort((a, b) => a.id > b.id)
    return (
        <div className="rooms-list">
            <div className="rooms-list-logo-wrap">
                <img className="rooms-list-logo" src={cuLogo}/>
            </div>
            <ul>
                <h3>Your rooms:</h3>
                {orderedRooms.map(room => {
                    const active = room.id === this.props.roomId ? 'active' : '';
                    return (
                        <li key={room.id} className={"room " + active}>
                            <a
                                onClick={() => this.props.subscribeToRoom(room.id)}
                                href="#">
                                # {room.name}
                            </a>
                        </li>
                    )
                })}
            </ul>
        </div>
    )
}